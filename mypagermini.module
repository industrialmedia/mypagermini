<?php

/**
 * @file
 * Module file for mypagermini.
 */

use Drupal\Core\Url;
use Drupal\Core\Template\Attribute;
use Drupal\mypagermini\Plugin\views\pager\Mypager;
use Drupal\Core\Render\Markup;

/**
 * Implements hook_preprocess_mypagermini_pager().
 */
function template_preprocess_mypagermini_pager(&$variables) {

  global $pager_page_array, $pager_total, $pager_total_items, $pager_limits;

  $tags = &$variables['tags'];
  $element = $variables['element'];
  $parameters = $variables['parameters'];

  // Current is the page we are currently paged to.
  $variables['items']['current'] = $pager_page_array[$element] + 1;



  if ($pager_total[$element] > 1 && $pager_page_array[$element] > 0) {
    $options = [
      'query' => pager_query_add_page($parameters, $element, $pager_page_array[$element] - 1),
    ];
    $variables['items']['previous']['href'] = \Drupal::url('<current>', [], $options);
    if (isset($tags[1])) {
      $variables['items']['previous']['text'] = $tags[1];
    }
    $variables['items']['previous']['attributes'] = new Attribute();
  }
  else {
    $variables['items']['previous']['href'] = \Drupal::url('<current>');
    if (isset($tags[1])) {
      $variables['items']['previous']['text'] = $tags[1];
    }
    $variables['items']['previous']['attributes'] = new Attribute(['disabled' => TRUE, 'class' => ['disabled'], 'rel' => 'prev']);
  }
  if ($variables['options']['nofollow']) {
    /* @var \Drupal\Core\Template\Attribute $attributes */
    $attributes = $variables['items']['previous']['attributes'];
    $attributes->setAttribute('rel', 'nofollow');
  }





  if ($pager_page_array[$element] < ($pager_total[$element] - 1)) {
    $options = [
      'query' => pager_query_add_page($parameters, $element, $pager_page_array[$element] + 1),
    ];
    $variables['items']['next']['href'] = \Drupal::url('<current>', [], $options);
    if (isset($tags[3])) {
      $variables['items']['next']['text'] = $tags[3];
    }
    $variables['items']['next']['attributes'] = new Attribute();
  }
  else {
    $variables['items']['next']['href'] = \Drupal::url('<current>');
    if (isset($tags[3])) {
      $variables['items']['next']['text'] = $tags[3];
    }
    $variables['items']['next']['attributes'] = new Attribute(['disabled' => TRUE, 'class' => ['disabled'], 'rel' => 'next']);
  }
  if ($variables['options']['nofollow']) {
    /* @var \Drupal\Core\Template\Attribute $attributes */
    $attributes = $variables['items']['next']['attributes'];
    $attributes->setAttribute('rel', 'nofollow');
  }

  

  // This is based on the entire current query string. We need to ensure
  // cacheability is affected accordingly.
  $variables['#cache']['contexts'][] = 'url.query_args';


  $total_items = $pager_total_items[$element];
  $items_per_page = $pager_limits[$element];
  $current = $pager_page_array[$element] + 1;
  $current_items = $current * $items_per_page;
  if ($current_items > $total_items) {
    $current_items = $total_items;
  }

  $search_replace = [
    '@current_items' => $current_items,
    '@total_items' => $total_items,
    '@current' => $current,
  ];

  if (!empty($variables['options']['pager_title'])) {
    $pager_title = $variables['options']['pager_title'];
    $pager_title = str_replace(array_keys($search_replace), array_values($search_replace), $pager_title);
    $variables['pager_title'] = Markup::create($pager_title);
  }

  if (!empty($variables['options']['pager_subtitle'])) {
    $pager_subtitle = $variables['options']['pager_subtitle'];
    $pager_subtitle = str_replace(array_keys($search_replace), array_values($search_replace), $pager_subtitle);
    $variables['pager_subtitle'] = Markup::create($pager_subtitle);
  }



}



